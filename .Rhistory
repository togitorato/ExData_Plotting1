plot(hcMax, hang = -1, labels = FALSE)
ColorDendrogram(hcMax, y = cls.max.2, branchlength = 25)
tmax.2 = table(cls.max.2, wines$quality.2)
tmax2
tmax.2
sum(diag(tmax.2))/nrow(wines)
cls.min.2 = cutree(hcMax, 2)
plot(hcMin, hang = -1, labels = FALSE)
ColorDendrogram(hcMin, y = cls.min.2, branchlength = 25)
cls.min.2 = cutree(hcMin, 2)
plot(hcMin, hang = -1, labels = FALSE)
ColorDendrogram(hcMin, y = cls.min.2, branchlength = 25)
tmin.2 = table(cls.min.2, wines$quality.2)
tmin.2
sum(diag(tmin.2))/nrow(wines)
t2
?dist
table(wines$quality.2)
d2 = dist(wines, method = "minkowski", 3)
head(d2)
head(dis)
d2 = dist(wines.2, method = "minkowski", 3)
head(d2)
d2 = dist(wines.2, method = "minkowski", 5)
head(d2)
d2 = dist(wines.2, method = "minkowski", p = 3)
head(d2)
cls.m3 = hclust(wines2, method = "ward.D2")
cls.m3 = hclust(wines.2, method = "ward.D2")
hcWard.p3 = hclust(d2, method = "ward.D2")
cls.p3 = cutree(hcWard.p3, 2)
plot(hcWard.p3, hang = 1, labels = FALSE)
ColorDendrogram(hcWard.p3, y = cls.p3, branclength = 35)
ColorDendrogram(hcWard.p3, y = cls.p3, branchlength = 35)
t.p3 = tble(cls.p3, wines$quality.2)
t.p3 = table(cls.p3, wines$quality.2)
t.p3
t2
sum(diag(t.p3))/nrow(wines)
sum(diag(t2))/nrow(wines)
library(datasets)
data("iris")
?iris
head(iris)
mean(iris$Sepal.Length[which(iris$Species == "virginica")])
length(iris)
iris
nrows(iris)
nrow(iris)
mean(iris$Sepal.Length[which(iris$Species == "virginica")])
tapply(iris, species, mean)
tapply(iris, "species", mean)
lapply(split(iris, species), mean)
lapply(split(iris, "species""), mean)
)
5
dsa
""
lapply(split(iris, "species"), mean)
lapply(split(iris, Species), mean)
lapply(split(iris, "Species"), mean)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean)
tapply(iris, Species, mean(Sepal.Length))
tapply(iris, Species, mean([,Sepal.Length]))
tapply(iris, Species, mean(iris$Sepal.Length))
mean(iris$Sepal.Length)
tapply(iris, iris$Species, mean(iris$Sepal.Length))
lapply(split(iris, iris$Species), function(x), colMeans(x[,"Sepal.Length"]))
lapply(split(iris, iris$Species), function(x), colMeans(x["Sepal.Length"]))
lapply(split(iris, iris$Species), function(x) colMeans(x["Sepal.Length"]))
round(6.558)
apply(iris[,1:4],2imean)
apply(iris[,1:4],2,mean)
m = apply(iris[,1:4],2,mean)
class(m)
str(m)
is.atomic(vector(m))
is.atomic(vector())
is.atomic(list())
is.list(m)
is.vector(m)
data("mtcars")
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars,mean)
?with
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars,2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg, mtcars$cyl)
m = sapply(split(mtcars$hp,mtcars$cyl),mean)
m
m["8"] - m["4"]
round(126.5779)
debug(ls)
ls
ls
lm
ls
debug(ls)
ls(m)
debug(ls)
ls()
8
getwd()
url = https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data = download.file(url)
data = download.file(url, destfile = "quiz1.csv")
names(data)
table = read.csv(data)
table = read.csv("quiz1.csv")
names(table)
sum(table$VAL = 24)
sum(table$VAL == 24)
table$VAL ==24
head(table)
val24 = table$VAL == 24
val24 = table[table$VAL == 24,]
nrow(val24)
View(val24)
m = is.na(val24$VAL)
val24 = val24[!m,]
url2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url2, destfile = "quiz1data2.csv")
table2 = "quiz1data2.csv"
table2 = read.csv("quiz1data2.csv")
table2 = read.csv("quiz1data2.csv")
table2 = read.csv("quiz1data2.csv")
download.file(url2, destfile = "quiz1data2.xslsx")
table2 = read.table("quiz1data2.xlsx")
download.file(url2, destfile = "quiz1data2.xslsx")
table2 = read.table("quiz1data2.xlsx")
getwd()
download.file(url2, destfile = "quiz1data2.xlsx")
table2 = read.table("quiz1data2.xlsx")
download.file(url2, destfile = "quiz1data2.csv")
download.file(url2, destfile = "quiz1data2.xlsx")
table2 = read.table("quiz1data2.xlsx")
#dat =
library(xlsx)
source()
source(xlsx)
table2 = read.xlsx("quiz1data2.xlsx")
table2 = read.xlsx("quiz1data2.xlsx", sheetIndex = 1)
head(table2)
dat = table2[c(18:23), c(7,15)]
sum(dat$Zip*dat$Ext,na.rm = T)
sum(dat$Zip*dat$Ext, na.rm = T)
View(dat)
dat = table2[c(18:23), c(7:15)]
sum(dat$Zip*dat$Ext, na.rm = T)
View(dat)
dat = read.xlsx("quiz1data2.xlsx", sheetIndex = 1,
colIndex = 7:15, rowIndex = 18:23)
head(dat, 2)
sum(dat$Zip*dat$Ext, na.rm = T)
library(xml)
library(XML)
url3 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url3, useInternal = TRUE)
url3 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url3, useInternal = TRUE)
url3 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url3, useInternal = TRUE)
head(doc)
rootNode = xmlRoot(doc)
head(rootNode)
xpathSApply(rootNode, "//zipcode", 21231)
xpathSApply(rootNode, "//zipcode", "21231")
xpathSApply(rootNode, "//zipcode", 21231)
xpathSApply(rootNode, //zipcode, 21231)
xpathSApply(rootNode, "//zipcode", xmlValue(21231))
xpathSApply(rootNode, "//zipcode", xmlValue)
sapply(rootNode$zipcode$21231, names)
m = xpathSApply(doc, "//li[@class = zipcode']", xmlValue)
m = xpathSApply(doc, "//li[@class = 'zipcode']", xmlValue)
names(m)
m
m = xmlToList(doc)
head(m)
m$zipcode == 21231
names(m)
names(m$rows)
names(m$row)
xpathSApply(doc, /node)
xpathSApply(doc, "/node")
for $zipcode in /XMLNodeSet/to/zipcode return(count$zipcode/21321)
zc = xpathSApply(rootNode[[1]][[1]], ".//21321", xmlChildren)
length(zc)
zc = xpathSApply(rootNode[[1]][[1]], ".//21231", xmlChildren)
length(zc)
zc = xpathSApply(rootNode[[1]][[2]], ".//21231", xmlChildren)
length(zc)
xpathSApply(doc, "//param[@id = '21231]", xmlValue)
m = xpathSApply(doc, "//param[@zipcode = '21231]", xmlValue)
m = xpathSApply(doc, "//param[@zipcode = '21231']", xmlValue)
m
length(m)
m$row$row$zipcode
m$row$zipcode
m = xpathSApply(doc, "//li/row[@zipcode = '21231']", xmlValue)
length(m)
m = xpathSApply(doc, "//li/row[@zipcode = 21231]", xmlValue)
m
m = xpathSApply(doc, "//li$row[@zipcode = '21231']", xmlValue)
m = xpathSApply(doc, "//li[@zipcode = '21231']", xmlValue)
length(m)
xmlSApply(zipcode, xmlGetAttr, '21231')
xmlSApply(zipcode, xmlGetAttr, "21231")
xmlSApply("zipcode", xmlGetAttr, "21231")
m = xpathSApply(doc, "//row[@zipcode = '21231']", xmlValue)
length(m)
setwd("C:\Users\TOYGAR AKIN\Documents\GitHub\ExData_Plotting1")
setwd("C://Users//TOYGAR AKIN//Documents//GitHub//ExData_Plotting1")
url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
filename = "project_data.zip"
if (!file.exists(filename)){
download.file(url, destfile = filename, mode = "wb")
}
#Unzip the file
if (!file.exists("Electric power consumption")){
unzip(filename)
}
#Unzip the file
if (!file.exists("household_power_consumption")){
unzip(filename)
}
?read.table
Lines <- readLines("household_power_consumption.txt")
subL <- grep("^[12]/2/2007", substr(Lines, 1,8))  # a numeric vector
inSub <- read.table(text = Lines[subL,,], header = TRUE, na.strings = TRUE)
head(inSub)
inSub <- read.table(text = Lines[subL,], header = TRUE, na.strings = TRUE)
inSub <- read.table(text = Lines[subL], header = TRUE, na.strings = TRUE)
head(inSub)
inSub <- read.table(text = Lines[subL], header = TRUE, na.strings = TRUE, col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = TRUE, col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL,,], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
5
5
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL,,], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
subL <- grep("^[12]/2/2007", substr(Lines, 1,8))  # a numeric vector
inSub <- read.table(text = Lines[subL,,], header = TRUE, sep = ";" na.strings = "?", col.names =
c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL,,], header = TRUE, sep = ";" na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL,,], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
inSub <- read.table(text = Lines[subL], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(inSub)
lines <- readLines("household_power_consumption.txt")
good <- grep("^[12]/2/2007", substr(lines, 1,8))
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(table)
tail(table)
table$Date = strptime(table$Date)
table$Date = as.Date(table$Date)
table$Time = as.Date(table$Time)
table$Time = strptime(table$Time)
class(table)
str(table)
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
#Check if correct lines are read or not.
head(table)
tail(table)
table$Date = as.Date(table$Date)
table$Time = strptime(table$Time)
str(table)
table$Time = as.POSIXlt(table$Time)
#Check if correct lines are read or not.
head(table)
?as.Date
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
table$Date = as.Date(table$Date, "%d/%m/%Y")
#Check if correct lines are read or not.
head(table)
table$Time = strptime(table$Time, "%H:%M:%S")
#Check if correct lines are read or not.
head(table)
head(table$Date)
head(table$Time)
?strptime
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
table$Time = as.POSIXlt(table$Time, "%H:%M:%S")
table$Time = as.POSIXlt(strptime(table$Time, "%H:%M:%S"))
table$Date = as.Date(table$Date, "%d/%m/%Y")
#Check if correct lines are read or not.
head(table)
hist(table$Global_active_power)
hist(table$Global_active_power, col = "red")
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(Global_active_power ~ Time, data = table)
plot(data = table, Global_active_power ~ Time)
? plot
with(table, plot(Time, Global_active_power))
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
?paste
realDate = paste(table$Date, table$Time)
table$realDate = paste(table$Date, table$Time)
View(table)
table$realDate = as.Date(table$realDate, "%d/%m/%Y %H:%M:%S")
#Check if correct lines are read or not.
head(table)
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
table$realDate = paste(table$Date, table$Time)
#Check if correct lines are read or not.
head(table)
table$realDate = strptime(table$realDate, "%d/%m/%Y %H:%M:%S")
tail(table)
with(table, plot(Time, Global_active_power))
with(table, plot(realDate, Global_active_power))
with(table, plot(realDate, Global_active_power, type = "l"))
with(table, plot(realDate, Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)",
xlab = ""))
plot(type = "n")
with(table, plot(type = "n"))
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, plot(realDate, Sub_metering_2, type = "l", col = "red"))
with(table, plot(realDate, Sub_metering_3, type = "l", col = "blue"))
?line
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, line(realDate, Sub_metering_2, type = "l", col = "red"))
with(table, line(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"))
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", col = "black", "red", "blue", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = "line", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = "-", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
par = mfrow(c(2,2))
par(mfrow = c(2,2))
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
with(table, plot(realDate, Voltage, type = "l"))
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(table, plot(realDate, Global_reactive_power, type = "l"))
windows()
par(mfrow = c(2,2))
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
with(table, plot(realDate, Voltage, type = "l"))
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(table, plot(realDate, Global_reactive_power, type = "l"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), box.lty = 0)
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), box.lty = 0)
windows()
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), box.lty = 0)
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = ""))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), box.lty = 0)
with(table, plot(realDate, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l"))
with(table, plot(realDate, Voltage, type = "l"))
with(table, plot(realDate, Voltage, type = "l", xlab = ""))
with(table, plot(realDate, Global_reactive_power, type = "l", ylab = "Global Active Power", xlab = ""))
#Read the lines and determine which ones to extract from the data set.
lines <- readLines("household_power_consumption.txt")
good <- grep("^[12]/2/2007", substr(lines, 1,8))
#Read and construct the table with respect to desired lines.
table <- read.table(text = lines[good], header = TRUE, sep = ";", na.strings = "?",
col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
stringsAsFactors = FALSE)
#Check if correct lines are read or not.
head(table)
tail(table)
table$realDate = paste(table$Date, table$Time)
table$realDate = strptime(table$realDate, "%d/%m/%Y %H:%M:%S")
#Plot
windows()
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
setwd("C://Users//TOYGAR AKIN//Documents//GitHub//ExData_Plotting1")
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
#Plot
png(filename = "plot1.png", width = 480, height = 480, units = "px")
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
setwd("C://Users//TOYGAR AKIN//Documents//GitHub//ExData_Plotting1")
head(table)
#Plot
png(filename = "plot1.png", width = 480, height = 480, units = "px")
with(table, plot(realDate, Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)",
xlab = ""))
dev.off()
#Plot
png(filename = "plot1.png", width = 480, height = 480, units = "px")
hist(table$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
#Plot
png(filename = "plot2.png", width = 480, height = 480, units = "px")
with(table, plot(realDate, Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)",
xlab = ""))
dev.off()
#Plot
png(filename = "plot3.png", width = 480, height = 480, units = "px")
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black"))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"), ylab = "Energy sub metering", xlab = "")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
#Plot
png(filename = "plot3.png", width = 480, height = 480, units = "px")
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = ""))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
#Plot
png(filename = "plot4.png", width = 480, height = 480, units = "px")
#Construct the 2x2 frame first.
par(mfrow = c(2,2))
#plot1
with(table, plot(realDate, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l"))
#plot2
with(table, plot(realDate, Voltage, type = "l", xlab = ""))
#plot3
with(table, plot(realDate, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = ""))
with(table, lines(realDate, Sub_metering_2, col = "red"))
with(table, lines(realDate, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), box.lty = 0)
#plot4
with(table, plot(realDate, Global_reactive_power, type = "l", ylab = "Global Active Power", xlab = ""))
dev.off()
